// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRANSFORMSCHEMA_LEADERENGINE_H_
#define FLATBUFFERS_GENERATED_TRANSFORMSCHEMA_LEADERENGINE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace LeaderEngine {

struct vec2;
struct vec2Builder;

struct TransformSchema;
struct TransformSchemaBuilder;

struct vec2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef vec2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct vec2Builder {
  typedef vec2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(vec2::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(vec2::VT_Y, y, 0.0f);
  }
  explicit vec2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<vec2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<vec2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<vec2> Createvec2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  vec2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct TransformSchema FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformSchemaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6,
    VT_SCALE = 8
  };
  const LeaderEngine::vec2 *position() const {
    return GetPointer<const LeaderEngine::vec2 *>(VT_POSITION);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  const LeaderEngine::vec2 *scale() const {
    return GetPointer<const LeaderEngine::vec2 *>(VT_SCALE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(scale()) &&
           verifier.EndTable();
  }
};

struct TransformSchemaBuilder {
  typedef TransformSchema Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<LeaderEngine::vec2> position) {
    fbb_.AddOffset(TransformSchema::VT_POSITION, position);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(TransformSchema::VT_ROTATION, rotation, 0.0f);
  }
  void add_scale(::flatbuffers::Offset<LeaderEngine::vec2> scale) {
    fbb_.AddOffset(TransformSchema::VT_SCALE, scale);
  }
  explicit TransformSchemaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TransformSchema> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TransformSchema>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TransformSchema> CreateTransformSchema(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<LeaderEngine::vec2> position = 0,
    float rotation = 0.0f,
    ::flatbuffers::Offset<LeaderEngine::vec2> scale = 0) {
  TransformSchemaBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const LeaderEngine::TransformSchema *GetTransformSchema(const void *buf) {
  return ::flatbuffers::GetRoot<LeaderEngine::TransformSchema>(buf);
}

inline const LeaderEngine::TransformSchema *GetSizePrefixedTransformSchema(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LeaderEngine::TransformSchema>(buf);
}

inline bool VerifyTransformSchemaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LeaderEngine::TransformSchema>(nullptr);
}

inline bool VerifySizePrefixedTransformSchemaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LeaderEngine::TransformSchema>(nullptr);
}

inline void FinishTransformSchemaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LeaderEngine::TransformSchema> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransformSchemaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LeaderEngine::TransformSchema> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace LeaderEngine

#endif  // FLATBUFFERS_GENERATED_TRANSFORMSCHEMA_LEADERENGINE_H_
