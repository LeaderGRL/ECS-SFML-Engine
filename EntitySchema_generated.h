// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYSCHEMA_LEADERENGINE_H_
#define FLATBUFFERS_GENERATED_ENTITYSCHEMA_LEADERENGINE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Animation2DComponentSchema_generated.h"
#include "Sprite2DComponentSchema_generated.h"
#include "TransformSchema_generated.h"

namespace LeaderEngine {

struct EntitySchema;
struct EntitySchemaBuilder;

enum Component : uint8_t {
  Component_NONE = 0,
  Component_Sprite2DComponentSchema = 1,
  Component_Animation2DComponentSchema = 2,
  Component_MIN = Component_NONE,
  Component_MAX = Component_Animation2DComponentSchema
};

inline const Component (&EnumValuesComponent())[3] {
  static const Component values[] = {
    Component_NONE,
    Component_Sprite2DComponentSchema,
    Component_Animation2DComponentSchema
  };
  return values;
}

inline const char * const *EnumNamesComponent() {
  static const char * const names[4] = {
    "NONE",
    "Sprite2DComponentSchema",
    "Animation2DComponentSchema",
    nullptr
  };
  return names;
}

inline const char *EnumNameComponent(Component e) {
  if (::flatbuffers::IsOutRange(e, Component_NONE, Component_Animation2DComponentSchema)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesComponent()[index];
}

template<typename T> struct ComponentTraits {
  static const Component enum_value = Component_NONE;
};

template<> struct ComponentTraits<LeaderEngine::Sprite2DComponentSchema> {
  static const Component enum_value = Component_Sprite2DComponentSchema;
};

template<> struct ComponentTraits<LeaderEngine::Animation2DComponentSchema> {
  static const Component enum_value = Component_Animation2DComponentSchema;
};

bool VerifyComponent(::flatbuffers::Verifier &verifier, const void *obj, Component type);
bool VerifyComponentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct EntitySchema FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntitySchemaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TRANSFORM = 6,
    VT_COMPONENTS_TYPE = 8,
    VT_COMPONENTS = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const LeaderEngine::TransformSchema *transform() const {
    return GetPointer<const LeaderEngine::TransformSchema *>(VT_TRANSFORM);
  }
  const ::flatbuffers::Vector<uint8_t> *components_type() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_COMPONENTS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *components() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_COMPONENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           VerifyOffset(verifier, VT_COMPONENTS_TYPE) &&
           verifier.VerifyVector(components_type()) &&
           VerifyOffset(verifier, VT_COMPONENTS) &&
           verifier.VerifyVector(components()) &&
           VerifyComponentVector(verifier, components(), components_type()) &&
           verifier.EndTable();
  }
};

struct EntitySchemaBuilder {
  typedef EntitySchema Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(EntitySchema::VT_ID, id, 0);
  }
  void add_transform(::flatbuffers::Offset<LeaderEngine::TransformSchema> transform) {
    fbb_.AddOffset(EntitySchema::VT_TRANSFORM, transform);
  }
  void add_components_type(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> components_type) {
    fbb_.AddOffset(EntitySchema::VT_COMPONENTS_TYPE, components_type);
  }
  void add_components(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> components) {
    fbb_.AddOffset(EntitySchema::VT_COMPONENTS, components);
  }
  explicit EntitySchemaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntitySchema> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntitySchema>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntitySchema> CreateEntitySchema(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<LeaderEngine::TransformSchema> transform = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> components_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> components = 0) {
  EntitySchemaBuilder builder_(_fbb);
  builder_.add_components(components);
  builder_.add_components_type(components_type);
  builder_.add_transform(transform);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EntitySchema> CreateEntitySchemaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<LeaderEngine::TransformSchema> transform = 0,
    const std::vector<uint8_t> *components_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *components = nullptr) {
  auto components_type__ = components_type ? _fbb.CreateVector<uint8_t>(*components_type) : 0;
  auto components__ = components ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*components) : 0;
  return LeaderEngine::CreateEntitySchema(
      _fbb,
      id,
      transform,
      components_type__,
      components__);
}

inline bool VerifyComponent(::flatbuffers::Verifier &verifier, const void *obj, Component type) {
  switch (type) {
    case Component_NONE: {
      return true;
    }
    case Component_Sprite2DComponentSchema: {
      auto ptr = reinterpret_cast<const LeaderEngine::Sprite2DComponentSchema *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Component_Animation2DComponentSchema: {
      auto ptr = reinterpret_cast<const LeaderEngine::Animation2DComponentSchema *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyComponentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyComponent(
        verifier,  values->Get(i), types->GetEnum<Component>(i))) {
      return false;
    }
  }
  return true;
}

inline const LeaderEngine::EntitySchema *GetEntitySchema(const void *buf) {
  return ::flatbuffers::GetRoot<LeaderEngine::EntitySchema>(buf);
}

inline const LeaderEngine::EntitySchema *GetSizePrefixedEntitySchema(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LeaderEngine::EntitySchema>(buf);
}

inline bool VerifyEntitySchemaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LeaderEngine::EntitySchema>(nullptr);
}

inline bool VerifySizePrefixedEntitySchemaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LeaderEngine::EntitySchema>(nullptr);
}

inline void FinishEntitySchemaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LeaderEngine::EntitySchema> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntitySchemaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LeaderEngine::EntitySchema> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace LeaderEngine

#endif  // FLATBUFFERS_GENERATED_ENTITYSCHEMA_LEADERENGINE_H_
